import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    signingConfigs {
        google_play {
        }
    }
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
    defaultConfig {
        applicationId "com.handytasks.handytasks"
        minSdkVersion 15
        targetSdkVersion 21
        // versionCode 1
        // versionName "1.0"
        signingConfig signingConfigs.google_play
    }
    buildTypes {
        debug {
            manifestPlaceholders = [maps_v2_API_KEY: "AIzaSyBJzZSk01vvHMSFPHDJHkdy98OuK4IJ4-g"]
        }
        release {
            manifestPlaceholders = [maps_v2_API_KEY: "AIzaSyBu0JifHu3eQWbR3Sb5JT52cS6nTw676TA"]
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.google_play
        }
    }
    productFlavors {
    }
}

task('increaseVersionCode') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
    manifestFile.write(manifestContent)
}

task('incrementVersionName') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def buildVersion = Integer.parseInt(matcherVersionNumber.group(4))
    def mNextVersionName = majorVersion + "." + minorVersion + "." + pointVersion + "." + (buildVersion + 1)
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    manifestFile.write(manifestContent)
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig' || task.name == 'generateDebugBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}
dependencies {
    compile files('libs/dropbox-sync-sdk-android.jar')
    compile files('libs/acra-4.6.1.jar')
    compile 'com.google.android.gms:play-services-drive:7.0.0'
    compile 'com.google.android.gms:play-services-analytics:7.0.0'
    compile 'com.google.android.gms:play-services-maps:7.0.0'
    compile 'com.google.android.gms:play-services-location:7.0.0'
    compile project(':datetimepicker-library')
    compile project(':lib-core')
    compile project(':lib-core-slh')
    compile project(':lib-manipulation')
}
